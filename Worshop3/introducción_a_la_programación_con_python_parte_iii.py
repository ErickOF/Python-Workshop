# -*- coding: utf-8 -*-
"""Introducción a la Programación con Python - Parte III.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WeBYLKE3akrPexwQHPFLlijaraFDTKtO

# Recursividad o Recursion

## Pila

$\sum_{i=0}^{n}{i} = 0 + 1 + 2 + 3 + ... + n$
"""

"""
sumatoria(5)
5 + sumatoria(4)
5 + 4 + sumatoria(3)
5 + 4 + 3 + sumatoria(2)
5 + 4 + 3 + 2 + sumatoria(1)
5 + 4 + 3 + 2 + 1 + sumatoria(0)
5 + 4 + 3 + 2 + 1 + 0
5 + 4 + 3 + 2 + 1
5 + 4 + 3 + 3
5 + 4 + 6
5 + 10
15

>>> 15
"""
def sumatoria(num):
    print(num)
    if num == 0:
        return 0
    return num + sumatoria(num - 1)

sumatoria(5)

"""
crearSequencia(3)
[3] + crearSequencia(2)
[3] + [2] + crearSequencia(1)
[3] + [2] + [1] + crearSequencia(0)
[3] + [2] + [1] + [0]
[3] + [2] + [1, 0]
[3] + [2, 1, 0]
[3, 2, 1, 0]
"""
def crearSequencia(num):
    if (num == 0):
        return [0]
    return [num] + crearSequencia(num - 1)

crearSequencia(3)

import random

def crearFila(cols):
    if (cols == 0):
        return []
    return crearFila(cols - 1) + [random.randint(0, 9)]

def crearMatriz(filas, cols):
    if filas == 0:
        return []
    else:
        return [crearFila(cols)] + crearMatriz(filas - 1, cols)

"""
crearMatriz(2, 3)
[crearFila(3)] + crearMatriz(1, 3)
[crearFila(2) + [3]] + crearMatriz(1, 3)
[crearFila(1) + [4] + [3]] + crearMatriz(1, 3)
[crearFila(0) + [4] + [4] + [3]] + crearMatriz(1, 3)
[[] + [4] + [4] + [3]] + crearMatriz(1, 3)
[[4, 4, 3]] + crearMatriz(1, 3)
[[4, 4, 3]] + [crearFila(3)] + crearMatriz(0, 3)
[[4, 4, 3]] + [[5, 2, 1]] + crearMatriz(0, 3)
[[4, 4, 3]] + [[5, 2, 1]] + []
[[4, 4, 3]] + [[5, 2, 1]]
[[4, 4, 3], [5, 2, 1]]
>>> [[4, 4, 3], [5, 2, 1]]
"""
crearMatriz(2, 3)

"""## Cola

$\sum_{i=0}^{n}{i} = 0 + 1 + 2 + 3 + ... + n$
"""

def sumatoria(num):
    return sumatoria_aux(num, 0)

def sumatoria_aux(num, resultado):
    if num == 0:
        return resultado
    else:
        return sumatoria_aux(num - 1, resultado + num)

"""
sumatoria(5)
sumatoria_aux(5, 0)
sumatoria_aux(5 - 1, 0 + 5) -> sumatoria_aux(4, 5)
sumatoria_aux(4 - 1, 5 + 4) -> sumatoria_aux(3, 9)
sumatoria_aux(3 - 1, 9 + 3) -> sumatoria_aux(2, 12)
sumatoria_aux(2 - 1, 12 + 2) -> sumatoria_aux(1, 14)
sumatoria_aux(1 - 1, 14 + 1) -> sumatoria_aux(0, 15)
>>> 15
"""
sumatoria(5)

def sumatoria(num, resultado=0):
    if num == 0:
        return resultado
    else:
        return sumatoria(num - 1, resultado + num)

sumatoria(5)

def crearSecuenciaNumerica(num, resultado=[]):
    if num == 0:
        return [0] + resultado
    else:
        # resultado.insert(0, num)
        # return crearSecuenciaNumerica(num - 1, resultado)
        return crearSecuenciaNumerica(num - 1, [num] + resultado)

"""
crearSecuenciaNumerica(3) -> crearSecuenciaNumerica(3, [])
crearSecuenciaNumerica(3 - 1, [3] + []) -> crearSecuenciaNumerica(2, [3])
crearSecuenciaNumerica(2 - 1, [2] + [3]) -> crearSecuenciaNumerica(1, [2, 3])
crearSecuenciaNumerica(1 - 1, [1] + [2, 3]) -> crearSecuenciaNumerica(0, [1, 2, 3])
[0] + [1, 2, 3]
>>> [0, 1, 2, 3]
"""
crearSecuenciaNumerica(3)

"""# **POO**
## **Programación Orientada a Objetos**

[Más información](https://docs.python.org/3/reference/datamodel.html)

```python
class NombreClase:
    def __init__(self, [,args...]) -> None:
        # Atributos: Caracteristicas

    # print(obj)
    def __str__(self) -> str:
        return 'Algo'
```
"""

import random

ids = []

class Persona:
    # Constructor de la clase
    def __init__(self, pnombre, papellido, pedad, pcedula, plugar):
        # Atributos o Caracteristicas
        correcto = False
        while not correcto:
            _id = random.randint(0, 1000000)
            if _id not in ids:
                self._id = _id
                ids.append(_id)
                correcto = True

        self.nombre = pnombre
        self.apellido = papellido
        self.edad = pedad
        self.cedula = pcedula
        self.lugar = plugar
    
    # Metodos -> Las acciones que puede realizar el objeto
    def presentarse(self):
        print('Mi id es:', self._id)
        print('Mi nombre es:', self.nombre)
        print('Mi apellido es:', self.apellido)
        print('Mi edad es:', self.edad)
        print('Mi cedula es:', self.cedula)
        print('Mi lugar de nacimiento es:', self.lugar)
    
    # Se llamada cuando se ejecuta un print
    def __str__(self) -> str: # Devuelve un str 3.8 <= x
        info = 'Mi nombre es: ' + self.nombre + '\n'
        info = info + 'Mi apellido es: ' + self.apellido + '\n'
        info = info + 'Mi edad es: ' + str(self.edad) + '\n'
        info = info + 'Mi cedula es: ' + str(self.cedula) + '\n'
        info = info + 'Mi lugar de nacimiento es: ' + self.lugar
        return info

personaErick = Persona('Erick', 'Obregon', 22, 309470457, 'Cartago')
personaErick.presentarse()

personaAndres = Persona('Andres', 'Fonseca', 30, 107460826, 'SJ')
personaAndres.presentarse()

num = 2
print(num)

print(personaErick)

class Clase:
    def __init__(self):
        self.cadena = ''
        self.lista = []
        self.tupla = (,)
        self.diccionario = {}
        self.numero = 0

personaErick.edad += 1
print(personaErick.edad)
personaErick.presentarse()

class Loro:
    def __init__(self, nombre, especie):
        # Privados __
        self.__nombre = nombre
        self.__especie = especie
    
    # Get y set
    def getNombre(self):
        return self.__nombre

    def getEspecie(self):
        return self.__especie
    
    def setNombre(self, nuevoNombre):
        self.__nombre = nuevoNombre

loro = Loro('Juanico', 'Pajaro azul')

loro.setNombre('Pancho')
loro.getNombre()

loro.getEspecie()

class Clase1:
    class Clase2:
        def __init__(self):
            pass
    
    def __init(self):
        pass

# El nombre de las clase siempre inicia en mayuscula
# Siempre son nombres de objectos tangibles
# Siempre son en singular
class Carro:
    # Siempre lleva el self
    def __init__(self, marca, modelo, year, turbo):
        """Clase Carro

        Parametros:
            marca - marca del carro
            modelo - modelo del carro
            year - cuando fue lanzado
            turbo - True si tiene turbo y False en caso contrario
        """
        self.__marca = marca
        self.__modelo = modelo
        self.__year = __year
        self.__turbo = turbo
        self.__encendido = False
    
    # Get
    def getMarca(self):
        return self.__marca
    
    # Set
    def setMarca(self, nuevaMarca):
        self.__marca = nuevaMarca
    
    # Metodos o acciones que realiza la clase
    # Infinitivo
    def arrancar(self):
        self.__encendido = True
    
    def apagar(self):
        self.__encendido = False
    
    def estaEncendido(self):
        return self.__encendido
    
    def estaApagado(self):
        return not self.__encendido

"""# Herencia"""

class Persona:
    # Constructor de la clase
    def __init__(self, nombre, apellido, edad, cedula, lugar):
        self.__nombre = nombre
        self.__apellido = apellido
        self.__edad = edad
        self.__cedula = cedula
        self.__lugar = lugar
    
    # Se llamada cuando se ejecuta un print
    def __str__(self) -> str: # Devuelve un str 3.8 <= x
        info = 'Mi nombre es: ' + self.__nombre + '\n'
        info = info + 'Mi apellido es: ' + self.__apellido + '\n'
        info = info + 'Mi edad es: ' + str(self.__edad) + '\n'
        info = info + 'Mi cedula es: ' + str(self.__cedula) + '\n'
        info = info + 'Mi lugar de nacimiento es: ' + self.__lugar
        return info
    
    def getNombre(self):
        return self.__nombre
    
    def setNombre(self, nuevoNombre):
        self.__nombre = nuevoNombre

class Estudiante(Persona):
    def __init__(self, nombre, apellido, edad, cedula, lugar, carnet, escuela):
        super(Estudiante, self).__init__(nombre, apellido, edad, cedula, lugar)
        self.__carnet = carnet
        self.__escuela = escuela

    def __str__(self):
        info = super().__str__() + '\n'
        info = info + 'Mi carnet es: ' + str(self.__carnet) + '\n'
        info = info + 'Mi escuela es: ' + self.__escuela
        return info

persona = Persona('Erick', 'Obregon', 22, 309470457, 'Cartago')
print(persona)
print(persona.getNombre())

estudiante = Estudiante('Erick', 'Obregon', 22, 309470457, 'Cartago', 2016123157, 'TEC')
print(estudiante)

"""## Sobre carga de operadores

### **Sobrecarga de Métodos Base** 
Algunas funcionalidades genéricas que pueden ser sobre cargadas

| Sr.No. | Method, Description & Sample Call |
|--------|-----------------------------------|
|   1    | \_\_init\_\_(self [,args...]) <br> Constructor (with any optional arguments <br> Sample Call : obj = className(args) |
|   2    | \_\_del\_\_(self) <br> Destructor, deletes an object <br> Sample Call : del obj |
|   3    | \_\_repr\_\_(self) <br> Evaluatable string representation <br> Sample Call : repr(obj) |
|   4    | \_\_str\_\_(self) <br> Printable string representation <br> Sample Call : str(obj) |
|   5    | \_\_cmp\_\_(self, x) <br> Object comparison <br> Sample Call : cmp(obj, x)

### **Operadores**
| **Operator** | **Method** |
| ------------ | ---------- |
|     a + b    | \_\_add\_\_(self, other) |
|     a - b    | \_\_sub\_\_(self, other) |
|     a * b    | \_\_mul\_\_(self, other) |
|     a @ b    | \_\_matmul\_\_(self, other) |
|     a \   b  | \_\_truediv\_\_(self, other) |
|     a \\ b   |   \_\_floordiv\_\_(self, other)    |
|     a % b    |      \_\_mod\_\_(self, other)      |
| divmod(a, b) |    \_\_divmod\_\_(self, other)     |
|     a ** b   | \_\_pow\_\_(self, other[, modulo]) |
|     a << b   | \_\_lshift\_\_(self, other) |
|     a >> b   |  \_\_rshift\_\_(self, other) |
|     a & b    |  \_\_and\_\_(self, other) |
|     a ^ b    |  \_\_xor\_\_(self, other) |
|     a ~ b    |  \_\_or\_\_(self, other) |
"""

class Rectangulo:
    def __init__(self, base, altura):
        self.__base = base
        self.__altura = altura
    
    def getBase(self):
        return self.__base

    def getAltura(self):
        return self.__altura
    
    def __str__(self):
        return "<Base: " + str(self.__base) + ", Altura: " + str(self.__altura) + ">"
    
    # self -> primer rectangulo antes del +
    # rectangulo -> rectangulo despues del +
    def __add__(self, rectangulo) -> Rectangulo:
        nuevaBase = self.__base + rectangulo.getBase()
        nuevaAltura = self.__altura + rectangulo.getAltura()
        return Rectangulo(nuevaBase, nuevaAltura)
    
    def __mult__(self):
        pass

    def __sub__(self):
        pass

num1 = 1
num2 = 2
num1 + num2

matrizA = [[1, 2], [2, 3]]
matrizB = [[2, 3], [2, 4]]
matrizA + matrizB

rectangulo1 = Rectangulo(2, 3)
rectangulo2 = Rectangulo(3, 5)
print(rectangulo1)
print(rectangulo2)
print(rectangulo1 + rectangulo2)

num1 = 1
num2 = 2
num1 + num2

cajas = []

cantidad = int(input('Digite la cantidad de cajas a crear: '))

for i in range(cantidad):
    base = float(input('Base de la caja ' + str(i + 1) + ': '))
    altura = float(input('Altura de la caja ' + str(i + 1) + ': '))
    caja = Rectangulo(base, altura)
    cajas.append(caja)

for caja in cajas:
    print(caja)